"""
PPoGA v2 Results to PoG-compatible JSONL Converter

This script converts PPoGA v2 individual JSON result files to 
PoG-compatible JSONL format for evaluation.
"""

import json
import os
import glob
from datetime import datetime
from typing import List, Dict, Any


def extract_answer_from_ppoga_result(result_data: Dict[str, Any]) -> str:
    """Extract answer from PPoGA v2 result format"""
    if 'answer' in result_data:
        return result_data['answer']
    return "Unknown"


def extract_question_from_ppoga_result(result_data: Dict[str, Any]) -> str:
    """Extract question from PPoGA v2 result format"""
    if 'question' in result_data:
        return result_data['question']
    return "Unknown"


def convert_ppoga_result_to_pog_format(result_data: Dict[str, Any]) -> Dict[str, Any]:
    """Convert PPoGA v2 result to PoG-compatible format"""
    
    question = extract_question_from_ppoga_result(result_data)
    answer = extract_answer_from_ppoga_result(result_data)
    
    # PoG 호환 형식으로 변환 (RawQuestion 키 사용)
    pog_result = {
        "RawQuestion": question,  # WebQSP/CWQ에서 사용하는 키
        "results": json.dumps({
            "A": {
                "Answer": answer,
                "Sufficient": "Yes" if result_data.get('success', False) else "No"
            },
            "R": result_data.get('reasoning', 'Generated by PPoGA v2')
        }),
        "call_num": result_data.get('iterations', 1),
        "time": result_data.get('execution_time', 0.0),
    }
    
    # 토큰 사용량 추출 (LLM interaction logs에서)
    total_tokens = {"input": 0, "output": 0, "total": 0}
    if 'statistics' in result_data and 'memory_summary' in result_data['statistics']:
        llm_logs = result_data['statistics']['memory_summary'].get('llm_interaction_logs', [])
        for log in llm_logs:
            if 'response' in log:
                try:
                    response_str = log['response']
                    if isinstance(response_str, str) and 'token_usage' in response_str:
                        import ast
                        response_dict = ast.literal_eval(response_str)
                        if 'token_usage' in response_dict:
                            token_info = response_dict['token_usage']
                            total_tokens["input"] += token_info.get('input', 0)
                            total_tokens["output"] += token_info.get('output', 0)
                            total_tokens["total"] += token_info.get('total', 0)
                except:
                    continue
    
    pog_result["input_token"] = total_tokens["input"]
    pog_result["output_token"] = total_tokens["output"]
    pog_result["total_token"] = total_tokens["total"]
    
    return pog_result


def convert_results_directory_to_jsonl(
    results_dir: str = "results", 
    output_file: str = None,
    model_name: str = "ppoga_v2"
) -> str:
    """Convert all PPoGA v2 result files in directory to JSONL format"""
    
    if output_file is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"results/PPoGA_v2_{model_name}_{timestamp}.jsonl"
    
    # PPoGA v2 결과 파일들 찾기
    pattern = os.path.join(results_dir, "ppoga_v2_result_*.json")
    result_files = glob.glob(pattern)
    
    print(f"🔍 Found {len(result_files)} PPoGA v2 result files")
    
    converted_results = []
    
    for result_file in sorted(result_files):
        try:
            print(f"📄 Processing: {os.path.basename(result_file)}")
            
            with open(result_file, 'r', encoding='utf-8') as f:
                result_data = json.load(f)
            
            # PPoGA v2 → PoG 형식 변환
            pog_result = convert_ppoga_result_to_pog_format(result_data)
            converted_results.append(pog_result)
            
        except Exception as e:
            print(f"❌ Error processing {result_file}: {e}")
            continue
    
    # JSONL 파일로 저장
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, 'w', encoding='utf-8') as f:
        for result in converted_results:
            f.write(json.dumps(result, ensure_ascii=False) + '\n')
    
    print(f"✅ Converted {len(converted_results)} results to {output_file}")
    return output_file


def convert_single_result_to_jsonl(
    result_file: str,
    output_file: str = None
) -> str:
    """Convert single PPoGA v2 result file to JSONL format"""
    
    if output_file is None:
        base_name = os.path.splitext(os.path.basename(result_file))[0]
        output_file = f"results/{base_name}_pog_format.jsonl"
    
    print(f"📄 Converting: {result_file}")
    
    try:
        with open(result_file, 'r', encoding='utf-8') as f:
            result_data = json.load(f)
        
        # PPoGA v2 → PoG 형식 변환
        pog_result = convert_ppoga_result_to_pog_format(result_data)
        
        # JSONL 파일로 저장
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(json.dumps(pog_result, ensure_ascii=False) + '\n')
        
        print(f"✅ Converted to {output_file}")
        return output_file
        
    except Exception as e:
        print(f"❌ Error converting {result_file}: {e}")
        return None


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Convert PPoGA v2 results to PoG-compatible JSONL format")
    parser.add_argument("--results_dir", type=str, default="results", 
                        help="Directory containing PPoGA v2 result files")
    parser.add_argument("--output_file", type=str, default=None,
                        help="Output JSONL file path")
    parser.add_argument("--model_name", type=str, default="gpt-3.5-turbo",
                        help="Model name for output file naming")
    parser.add_argument("--single_file", type=str, default=None,
                        help="Convert single result file instead of directory")
    
    args = parser.parse_args()
    
    print("🚀 PPoGA v2 to PoG JSONL Converter")
    
    if args.single_file:
        # 단일 파일 변환
        output_file = convert_single_result_to_jsonl(args.single_file, args.output_file)
    else:
        # 디렉토리 전체 변환
        output_file = convert_results_directory_to_jsonl(
            args.results_dir, 
            args.output_file, 
            args.model_name
        )
    
    if output_file:
        print(f"\n🎉 Conversion completed!")
        print(f"📁 Output file: {output_file}")
        print(f"💡 Use this file with PoG evaluation script:")
        print(f"   python eval.py --dataset <dataset> --output_file {os.path.splitext(os.path.basename(output_file))[0]}")
